# Generated by Django 3.2.7 on 2021-11-24 04:19

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0007_auto_20211023_2348'),
    ]

    operations = [
        migrations.AddField(
            model_name='productuseraccessed',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now, verbose_name='Created at'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='productuseraccessed',
            name='is_active',
            field=models.BooleanField(db_index=True, default=True, help_text='This register is active? If set as no, will show in website!', verbose_name='Active'),
        ),
        migrations.AddField(
            model_name='productuseraccessed',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, verbose_name='Updated at'),
        ),
        migrations.CreateModel(
            name='UserAddresses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='This register is active? If set as no, will show in website!', verbose_name='Active')),
                ('zip_code', models.CharField(help_text='Format example: 99999-999', max_length=9, validators=[django.core.validators.RegexValidator(code='invalid_zip_code', message='Invalid origin zip code', regex='^\\d{5}\\-\\d{3}$')], verbose_name='Zip code')),
                ('identification', models.CharField(max_length=255, verbose_name='Identification')),
                ('recipient', models.CharField(max_length=255, verbose_name='Recipient')),
                ('phone', models.CharField(help_text='Format example: (999) 99999-9999, (99) 9999-9999', max_length=255, validators=[django.core.validators.RegexValidator(code='invalid_phone', message='Invalid phone number', regex='^\\(\\d{2,3}\\) \\d{4,5}\\-\\d{4}$')], verbose_name='Phone number')),
                ('address', models.CharField(max_length=560, verbose_name='Address')),
                ('number', models.IntegerField(verbose_name='Number')),
                ('complement', models.CharField(blank=True, max_length=255, null=True, verbose_name='Complement')),
                ('reference', models.CharField(blank=True, max_length=560, null=True, verbose_name='Reference')),
                ('neighborhood', models.CharField(max_length=255, verbose_name='Neighborhood')),
                ('city', models.CharField(max_length=255, verbose_name='City')),
                ('state', models.CharField(choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AM', 'Amazonas'), ('AP', 'Amapá'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranão'), ('MG', 'Minas Gerais'), ('MS', 'Mato Grosso do Sul'), ('MT', 'Mato Grosso'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PE', 'Pernanbuco'), ('PI', 'Piauí'), ('PR', 'Paraná'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('RS', 'Rio Grande do Sul'), ('SC', 'Santa Catarina'), ('SE', 'Sergipe'), ('SP', 'São Paulo'), ('TO', 'Tocantins')], max_length=2, verbose_name='State')),
                ('is_default', models.BooleanField(default=False, help_text='Is the default address?', verbose_name='Default')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Addresses',
                'verbose_name_plural': 'User Addresses',
            },
        ),
    ]
